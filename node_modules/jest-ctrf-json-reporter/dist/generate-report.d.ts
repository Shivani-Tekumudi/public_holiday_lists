import { type TestResult, type Test, type AssertionResult } from '@jest/test-result';
import { type Reporter, type ReporterContext } from '@jest/reporters';
import { type Config } from '@jest/types';
import { type CtrfReport, type CtrfEnvironment, type CtrfTest } from '../types/ctrf';
interface ReporterConfigOptions {
    outputFile?: string;
    outputDir?: string;
    minimal?: boolean;
    testType?: string;
    appName?: string | undefined;
    appVersion?: string | undefined;
    osPlatform?: string | undefined;
    osRelease?: string | undefined;
    osVersion?: string | undefined;
    buildName?: string | undefined;
    buildNumber?: string | undefined;
    buildUrl?: string | undefined;
    repositoryName?: string | undefined;
    repositoryUrl?: string | undefined;
    branchName?: string | undefined;
    testEnvironment?: string | undefined;
}
declare class GenerateCtrfReport implements Reporter {
    readonly ctrfReport: CtrfReport;
    readonly ctrfEnvironment: CtrfEnvironment;
    readonly reporterConfigOptions: ReporterConfigOptions;
    readonly reporterName = "jest-ctrf-json-reporter";
    readonly defaultOutputFile = "ctrf-report.json";
    readonly defaultOutputDir = "ctrf";
    filename: string;
    constructor(_globalConfig: Config.GlobalConfig, reporterOptions: ReporterConfigOptions, _reporterContext: ReporterContext);
    onRunStart(): void;
    onTestStart(): void;
    onTestResult(_test: Test, testResult: TestResult): void;
    onRunComplete(): void;
    private setFilename;
    private updateCtrfTestResultsFromTestResult;
    extractFailureDetails(testResult: AssertionResult): Partial<CtrfTest>;
    private updateTotalsFromTestResult;
    private mapStatus;
    setEnvironmentDetails(reporterConfigOptions: ReporterConfigOptions): void;
    hasEnvironmentDetails(environment: CtrfEnvironment): boolean;
    buildSuitePath(testResult: TestResult, testCaseResult: AssertionResult): string;
    private writeReportToFile;
}
export default GenerateCtrfReport;
