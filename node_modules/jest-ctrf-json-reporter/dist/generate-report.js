"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
class GenerateCtrfReport {
    constructor(_globalConfig, reporterOptions, _reporterContext) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        this.reporterName = 'jest-ctrf-json-reporter';
        this.defaultOutputFile = 'ctrf-report.json';
        this.defaultOutputDir = 'ctrf';
        this.filename = this.defaultOutputFile;
        this.reporterConfigOptions = {
            outputFile: (_a = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.outputFile) !== null && _a !== void 0 ? _a : this.defaultOutputFile,
            outputDir: (_b = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.outputDir) !== null && _b !== void 0 ? _b : this.defaultOutputDir,
            minimal: (_c = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.minimal) !== null && _c !== void 0 ? _c : false,
            testType: (_d = reporterOptions.testType) !== null && _d !== void 0 ? _d : 'unit',
            appName: (_e = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.appName) !== null && _e !== void 0 ? _e : undefined,
            appVersion: (_f = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.appVersion) !== null && _f !== void 0 ? _f : undefined,
            osPlatform: (_g = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.osPlatform) !== null && _g !== void 0 ? _g : undefined,
            osRelease: (_h = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.osRelease) !== null && _h !== void 0 ? _h : undefined,
            osVersion: (_j = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.osVersion) !== null && _j !== void 0 ? _j : undefined,
            buildName: (_k = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.buildName) !== null && _k !== void 0 ? _k : undefined,
            buildNumber: (_l = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.buildNumber) !== null && _l !== void 0 ? _l : undefined,
            buildUrl: (_m = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.buildUrl) !== null && _m !== void 0 ? _m : undefined,
            repositoryName: (_o = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.repositoryName) !== null && _o !== void 0 ? _o : undefined,
            repositoryUrl: (_p = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.repositoryUrl) !== null && _p !== void 0 ? _p : undefined,
            branchName: (_q = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.branchName) !== null && _q !== void 0 ? _q : undefined,
            testEnvironment: (_r = reporterOptions === null || reporterOptions === void 0 ? void 0 : reporterOptions.testEnvironment) !== null && _r !== void 0 ? _r : undefined,
        };
        this.ctrfReport = {
            results: {
                tool: {
                    name: 'jest',
                },
                summary: {
                    tests: 0,
                    passed: 0,
                    failed: 0,
                    pending: 0,
                    skipped: 0,
                    other: 0,
                    start: 0,
                    stop: 0,
                },
                tests: [],
            },
        };
        this.ctrfEnvironment = {};
        if (((_s = this.reporterConfigOptions) === null || _s === void 0 ? void 0 : _s.outputFile) !== undefined)
            this.setFilename(this.reporterConfigOptions.outputFile);
        if (!fs.existsSync((_t = this.reporterConfigOptions.outputDir) !== null && _t !== void 0 ? _t : this.defaultOutputDir)) {
            fs.mkdirSync((_u = this.reporterConfigOptions.outputDir) !== null && _u !== void 0 ? _u : this.defaultOutputDir, { recursive: true });
        }
    }
    onRunStart() {
        var _a;
        this.ctrfReport.results.summary.start = Date.now();
        this.setEnvironmentDetails((_a = this.reporterConfigOptions) !== null && _a !== void 0 ? _a : {});
        if (this.hasEnvironmentDetails(this.ctrfEnvironment)) {
            this.ctrfReport.results.environment = this.ctrfEnvironment;
        }
    }
    onTestStart() { }
    onTestResult(_test, testResult) {
        this.updateCtrfTestResultsFromTestResult(testResult);
        this.updateTotalsFromTestResult(testResult);
    }
    onRunComplete() {
        this.ctrfReport.results.summary.stop = Date.now();
        this.writeReportToFile(this.ctrfReport);
    }
    setFilename(filename) {
        if (filename.endsWith('.json')) {
            this.filename = filename;
        }
        else {
            this.filename = `${filename}.json`;
        }
    }
    updateCtrfTestResultsFromTestResult(testResult) {
        testResult.testResults.forEach((testCaseResult) => {
            var _a, _b, _c, _d;
            const test = {
                name: testCaseResult.fullName,
                duration: (_a = testCaseResult.duration) !== null && _a !== void 0 ? _a : 0,
                status: this.mapStatus(testCaseResult.status),
            };
            if (this.reporterConfigOptions.minimal === false) {
                test.message = this.extractFailureDetails(testCaseResult).message;
                test.trace = this.extractFailureDetails(testCaseResult).trace;
                test.rawStatus = testCaseResult.status;
                test.type = (_b = this.reporterConfigOptions.testType) !== null && _b !== void 0 ? _b : 'unit';
                test.filePath = testResult.testFilePath;
                test.retries = ((_c = testCaseResult.invocations) !== null && _c !== void 0 ? _c : 1) - 1;
                test.flaky =
                    testCaseResult.status === 'passed' &&
                        ((_d = testCaseResult.invocations) !== null && _d !== void 0 ? _d : 1) - 1 > 0;
                test.suite = this.buildSuitePath(testResult, testCaseResult);
            }
            this.ctrfReport.results.tests.push(test);
        });
    }
    extractFailureDetails(testResult) {
        var _a;
        const messageStackTracePattern = /^\s{4}at/mu;
        // eslint-disable-next-line no-control-regex
        const colorCodesPattern = /\x1b\[\d+m/gmu;
        if (testResult.status === 'failed' &&
            testResult.failureMessages !== undefined) {
            const failureDetails = {};
            if (testResult.failureMessages !== undefined) {
                const joinedMessages = testResult.failureMessages.join('\n');
                const match = joinedMessages.match(messageStackTracePattern);
                failureDetails.message = joinedMessages
                    .slice(0, match === null || match === void 0 ? void 0 : match.index)
                    .replace(colorCodesPattern, '');
                failureDetails.trace = joinedMessages
                    .slice(match === null || match === void 0 ? void 0 : match.index)
                    .split('\n')
                    .map((line) => {
                    return line.trim();
                })
                    .join('\n');
            }
            if (testResult.failureDetails !== undefined) {
                failureDetails.trace = (_a = failureDetails.trace) === null || _a === void 0 ? void 0 : _a.concat('\n\n', testResult.failureDetails.join('\n'));
            }
            return failureDetails;
        }
        return {};
    }
    updateTotalsFromTestResult(testResult) {
        testResult.testResults.forEach((testCaseResult) => {
            const ctrfStatus = this.mapStatus(testCaseResult.status);
            this.ctrfReport.results.summary[ctrfStatus]++;
            this.ctrfReport.results.summary.tests++;
        });
    }
    mapStatus(jestStatus) {
        switch (jestStatus) {
            case 'passed':
                return 'passed';
            case 'failed':
                return 'failed';
            case 'skipped':
                return 'skipped';
            case 'pending':
                return 'pending';
            case 'todo':
            case 'disabled':
            case 'focused':
            default:
                return 'other';
        }
    }
    setEnvironmentDetails(reporterConfigOptions) {
        if (reporterConfigOptions.appName !== undefined) {
            this.ctrfEnvironment.appName = reporterConfigOptions.appName;
        }
        if (reporterConfigOptions.appVersion !== undefined) {
            this.ctrfEnvironment.appVersion = reporterConfigOptions.appVersion;
        }
        if (reporterConfigOptions.osPlatform !== undefined) {
            this.ctrfEnvironment.osPlatform = reporterConfigOptions.osPlatform;
        }
        if (reporterConfigOptions.osRelease !== undefined) {
            this.ctrfEnvironment.osRelease = reporterConfigOptions.osRelease;
        }
        if (reporterConfigOptions.osVersion !== undefined) {
            this.ctrfEnvironment.osVersion = reporterConfigOptions.osVersion;
        }
        if (reporterConfigOptions.buildName !== undefined) {
            this.ctrfEnvironment.buildName = reporterConfigOptions.buildName;
        }
        if (reporterConfigOptions.buildNumber !== undefined) {
            this.ctrfEnvironment.buildNumber = reporterConfigOptions.buildNumber;
        }
        if (reporterConfigOptions.buildUrl !== undefined) {
            this.ctrfEnvironment.buildUrl = reporterConfigOptions.buildUrl;
        }
        if (reporterConfigOptions.repositoryName !== undefined) {
            this.ctrfEnvironment.repositoryName = reporterConfigOptions.repositoryName;
        }
        if (reporterConfigOptions.repositoryUrl !== undefined) {
            this.ctrfEnvironment.repositoryUrl = reporterConfigOptions.repositoryUrl;
        }
        if (reporterConfigOptions.branchName !== undefined) {
            this.ctrfEnvironment.branchName = reporterConfigOptions.branchName;
        }
        if (reporterConfigOptions.testEnvironment !== undefined) {
            this.ctrfEnvironment.testEnvironment =
                reporterConfigOptions.testEnvironment;
        }
    }
    hasEnvironmentDetails(environment) {
        return Object.keys(environment).length > 0;
    }
    buildSuitePath(testResult, testCaseResult) {
        var _a;
        const fileName = (_a = testResult.testFilePath.split('/').pop()) !== null && _a !== void 0 ? _a : '';
        const suiteParts = [fileName, ...testCaseResult.ancestorTitles];
        return suiteParts.join(' > ');
    }
    writeReportToFile(data) {
        var _a;
        const filePath = path.join((_a = this.reporterConfigOptions.outputDir) !== null && _a !== void 0 ? _a : this.defaultOutputDir, this.filename);
        const str = JSON.stringify(data, null, 2);
        try {
            fs.writeFileSync(filePath, str + '\n');
            console.log(`${this.reporterName}: successfully written ctrf json to %s/%s`, this.reporterConfigOptions.outputDir, this.filename);
        }
        catch (error) {
            console.error(`Error writing ctrf json report:, ${String(error)}`);
        }
    }
}
exports.default = GenerateCtrfReport;
