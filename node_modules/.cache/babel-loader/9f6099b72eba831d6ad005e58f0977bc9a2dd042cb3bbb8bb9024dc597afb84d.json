{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srinu\\\\Downloads\\\\public_holidays\\\\src\\\\components\\\\HolidayForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { countriesData } from \"../api/holidayApi\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HolidayForm = ({\n  onSearch\n}) => {\n  _s();\n  const [countries, setCountries] = useState(null);\n  const [selectedVal, setSelectedVal] = useState(\"\");\n  const handleSubmit = e => {\n    e.preventDefault(); // Prevent form submission from refreshing the page\n    onSearch();\n  };\n  const handleChange = event => {\n    setSelectedVal(event.target.value);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await countriesData();\n        setCountries(data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchData();\n  }, []); // Empty dependency array ensures the effect runs once, on component mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedVal,\n        onChange: handleChange,\n        children: countries && countries.map((country, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: [country, \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Fetch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(HolidayForm, \"0WlGoRK1bTD8SOE6h4TW004PFdg=\");\n_c = HolidayForm;\nexport default HolidayForm;\nvar _c;\n$RefreshReg$(_c, \"HolidayForm\");","map":{"version":3,"names":["React","useState","useEffect","countriesData","jsxDEV","_jsxDEV","Fragment","_Fragment","HolidayForm","onSearch","_s","countries","setCountries","selectedVal","setSelectedVal","handleSubmit","e","preventDefault","handleChange","event","target","value","fetchData","data","err","console","log","children","onSubmit","onChange","map","country","index","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["C:/Users/srinu/Downloads/public_holidays/src/components/HolidayForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { countriesData } from \"../api/holidayApi\";\r\nimport { CountriesList } from \"../types/Holiday\";\r\n\r\ninterface HolidayFormProps {\r\n  onSearch: () => void;\r\n}\r\n\r\nconst HolidayForm: React.FC<HolidayFormProps> = ({ onSearch }) => {\r\n  const [countries, setCountries] = useState<CountriesList | null>(null);\r\n  const [selectedVal, setSelectedVal] = useState<string>(\"\");\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    e.preventDefault(); // Prevent form submission from refreshing the page\r\n    onSearch();\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setSelectedVal(event.target.value as string);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await countriesData();\r\n        setCountries(data);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // Empty dependency array ensures the effect runs once, on component mount\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <select value={selectedVal} onChange={handleChange}>\r\n          {countries &&\r\n            countries.map((country, index) => (\r\n              <option key={index} value={country}>\r\n                {country} {/* Display country name */}\r\n              </option>\r\n            ))}\r\n        </select>\r\n        <button type=\"submit\"> Fetch</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HolidayForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAOlD,MAAMC,WAAuC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAuB,IAAI,CAAC;EACtE,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAS,EAAE,CAAC;EAE1D,MAAMc,YAAY,GAAIC,CAAoC,IAAW;IACnEA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpBR,QAAQ,CAAC,CAAC;EACZ,CAAC;EAED,MAAMS,YAAY,GAAIC,KAA2C,IAAK;IACpEL,cAAc,CAACK,KAAK,CAACC,MAAM,CAACC,KAAe,CAAC;EAC9C,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMpB,aAAa,CAAC,CAAC;QAClCS,YAAY,CAACW,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAClB;IACF,CAAC;IAEDF,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEjB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,eACEtB,OAAA;MAAMuB,QAAQ,EAAEb,YAAa;MAAAY,QAAA,gBAC3BtB,OAAA;QAAQgB,KAAK,EAAER,WAAY;QAACgB,QAAQ,EAAEX,YAAa;QAAAS,QAAA,EAChDhB,SAAS,IACRA,SAAS,CAACmB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3B3B,OAAA;UAAoBgB,KAAK,EAAEU,OAAQ;UAAAJ,QAAA,GAChCI,OAAO,EAAC,GAAC;QAAA,GADCC,KAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACT/B,OAAA;QAAQgC,IAAI,EAAC,QAAQ;QAAAV,QAAA,EAAC;MAAM;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC;EAAC,gBACP,CAAC;AAEP,CAAC;AAAC1B,EAAA,CAzCIF,WAAuC;AAAA8B,EAAA,GAAvC9B,WAAuC;AA2C7C,eAAeA,WAAW;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}